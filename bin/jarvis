#!/usr/bin/env nodr


main();


function main() {
	var argv = process.argv,
		name = argv[2];

	if (!name) {
		return useage();
	}

	var command = null;
	try {
		command = require('../lib/command/' + name);
	} catch (e) {
		p('找不到命令: ' + name);
		return;
	}
	
	var args = parseArgs();
	command.run.apply(command, args);
}


function useage() {
	p('useage: jarvis <command> [<args>]');
	var commands = getCommands();
	commands.forEach(function(name) {
		var command = require('../lib/command/' + name);
		if (command.desc) {
			p(slen('', 3) + slen(name, 20) + command.desc());
		}
	});
}

function getCommands() {
	var Path = require('path'),
		fs = require('fs'),
		dir = Path.normalize(Path.join(__dirname, '../lib/command')),
		files = fs.readdirSync(dir);

	return files.filter(function(file) {
		return /\.js$/.test(file);
	}).map(function(file) {
		return file.replace(/\.js$/, '');
	});
}


function parseArgs() {
	var argv = process.argv,
		params = [],
		options = {}
		key = null;

	for (var i = 3, c = argv.length; i < c; i++) {
		var arg = argv[i];
		if (arg.indexOf('-') === 0) {
			key = arg.replace(/^-+/, '');
			options[key] = true;
		} else {
			if (key) {
				options[key] = arg;
				key = null;
			} else {
				params.push(arg);
			}
		}
	}

	return [params[0], options];
}


function slen(str, len) {
	len = len - str.length;
	if (len > 0) {
		var s = [];
		s.length = len + 1;
		str += s.join(' ');
	}
	return str;
}


function p(msg, len) {
	console.log(msg);
}
